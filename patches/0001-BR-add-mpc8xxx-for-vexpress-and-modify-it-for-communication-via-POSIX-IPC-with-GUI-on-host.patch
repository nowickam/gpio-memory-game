diff --git a/linux/1001-WZab-add-mpc8xxx-for-vexpress-dts1.patch b/linux/1001-WZab-add-mpc8xxx-for-vexpress-dts1.patch
new file mode 100644
index 0000000..1858656
--- /dev/null
+++ b/linux/1001-WZab-add-mpc8xxx-for-vexpress-dts1.patch
@@ -0,0 +1,36 @@
+diff --git a/arch/arm/boot/dts/vexpress-v2m.dtsi b/arch/arm/boot/dts/vexpress-v2m.dtsi
+index 4db42f6..eb07d4d 100644
+--- a/arch/arm/boot/dts/vexpress-v2m.dtsi
++++ b/arch/arm/boot/dts/vexpress-v2m.dtsi
+@@ -186,7 +186,7 @@
+ 					clocks = <&v2m_oscclk2>, <&smbclk>;
+ 					clock-names = "uartclk", "apb_pclk";
+ 				};
+-
++				
+ 				v2m_serial3: uart@c000 {
+ 					compatible = "arm,pl011", "arm,primecell";
+ 					reg = <0x0c000 0x1000>;
+@@ -194,7 +194,14 @@
+ 					clocks = <&v2m_oscclk2>, <&smbclk>;
+ 					clock-names = "uartclk", "apb_pclk";
+ 				};
+-
++				
++				v2m_gpiowz: gpio@8000 {
++					compatible = "fsl,qoriq-gpio";
++					reg = <0x08000 0x1000>;
++					interrupts = <8>;
++					clocks = <&smbclk>;
++					clock-names = "apb_pclk";
++				};
+ 				wdt@f000 {
+ 					compatible = "arm,sp805", "arm,primecell";
+ 					reg = <0x0f000 0x1000>;
+@@ -449,4 +456,4 @@
+ 			};
+ 		};
+ 	};
+-};
+\ No newline at end of file
++};
diff --git a/linux/1002-WZab-add-mpc8xxx-for-vexpress-dts2.patch b/linux/1002-WZab-add-mpc8xxx-for-vexpress-dts2.patch
new file mode 100644
index 0000000..e000499
--- /dev/null
+++ b/linux/1002-WZab-add-mpc8xxx-for-vexpress-dts2.patch
@@ -0,0 +1,21 @@
+diff --git a/arch/arm/boot/dts/vexpress-v2m-rs1.dtsi b/arch/arm/boot/dts/vexpress-v2m-rs1.dtsi
+index 4488c8f..2947674 100644
+--- a/arch/arm/boot/dts/vexpress-v2m-rs1.dtsi
++++ b/arch/arm/boot/dts/vexpress-v2m-rs1.dtsi
+@@ -194,7 +194,15 @@
+ 					clocks = <&v2m_oscclk2>, <&smbclk>;
+ 					clock-names = "uartclk", "apb_pclk";
+ 				};
+-
++				
++				v2m_gpiowz: gpio@80000 {
++					compatible = "fsl,8610-gpio";
++					reg = <0x080000 0x1000>;
++					interrupts = <8>;
++					clocks = <&smbclk>;
++					clock-names = "apb_pclk";
++				};
++				
+ 				wdt@f0000 {
+ 					compatible = "arm,sp805", "arm,primecell";
+ 					reg = <0x0f0000 0x1000>;
diff --git a/package/qemu/4.2.0/1001-WZab-qemu-add-mpc8xxx-for-vexpress1.patch b/package/qemu/4.2.0/1001-WZab-qemu-add-mpc8xxx-for-vexpress1.patch
new file mode 100644
index 0000000..4caef72
--- /dev/null
+++ b/package/qemu/4.2.0/1001-WZab-qemu-add-mpc8xxx-for-vexpress1.patch
@@ -0,0 +1,48 @@
+diff --git a/hw/arm/vexpress.c b/hw/arm/vexpress.c
+index 4673a88..10a10d2 100644
+--- a/hw/arm/vexpress.c
++++ b/hw/arm/vexpress.c
+@@ -88,6 +88,7 @@ enum {
+     VE_USB,
+     VE_DAPROM,
+     VE_VIRTIO,
++    VE_MPC8XXX,
+ };
+ 
+ static hwaddr motherboard_legacy_map[] = {
+@@ -100,6 +101,7 @@ static hwaddr motherboard_legacy_map[] = {
+     [VE_MMCI] = 0x10005000,
+     [VE_KMI0] = 0x10006000,
+     [VE_KMI1] = 0x10007000,
++    [VE_MPC8XXX] = 0x10008000,
+     [VE_UART0] = 0x10009000,
+     [VE_UART1] = 0x1000a000,
+     [VE_UART2] = 0x1000b000,
+@@ -640,11 +642,14 @@ static void vexpress_common_init(MachineState *machine)
+     pl011_create(map[VE_UART0], pic[5], serial_hd(0));
+     pl011_create(map[VE_UART1], pic[6], serial_hd(1));
+     pl011_create(map[VE_UART2], pic[7], serial_hd(2));
+-    pl011_create(map[VE_UART3], pic[8], serial_hd(3));
++    // pl011_create(map[VE_UART3], pic[8], serial_hd(3)); //Removed by WZab
+ 
+     sysbus_create_simple("sp804", map[VE_TIMER01], pic[2]);
+     sysbus_create_simple("sp804", map[VE_TIMER23], pic[3]);
+ 
++    /* MPC8XXX - model by WZab we take over interrupt from UART3 */
++    sysbus_create_simple("mpc8xxx_gpio", map[VE_MPC8XXX], pic[8]);
++
+     dev = sysbus_create_simple("versatile_i2c", map[VE_SERIALDVI], NULL);
+     i2c = (I2CBus *)qdev_get_child_bus(dev, "i2c");
+     i2c_create_slave(i2c, "sii9022", 0x39);
+diff --git a/hw/gpio/Makefile.objs b/hw/gpio/Makefile.objs
+index d305b3b..1ad64f1 100644
+--- a/hw/gpio/Makefile.objs
++++ b/hw/gpio/Makefile.objs
+@@ -3,6 +3,7 @@ common-obj-$(CONFIG_PL061) += pl061.o
+ common-obj-$(CONFIG_PUV3) += puv3_gpio.o
+ common-obj-$(CONFIG_ZAURUS) += zaurus.o
+ common-obj-$(CONFIG_E500) += mpc8xxx.o
++common-obj-$(CONFIG_VEXPRESS) += mpc8xxx.o
+ common-obj-$(CONFIG_GPIO_KEY) += gpio_key.o
+ 
+ obj-$(CONFIG_OMAP) += omap_gpio.o
diff --git a/package/qemu/4.2.0/1002-WZab-qemu-add-mpc8xxx-for-vexpress2.patch b/package/qemu/4.2.0/1002-WZab-qemu-add-mpc8xxx-for-vexpress2.patch
new file mode 100644
index 0000000..1501d78
--- /dev/null
+++ b/package/qemu/4.2.0/1002-WZab-qemu-add-mpc8xxx-for-vexpress2.patch
@@ -0,0 +1,12 @@
+diff --git a/hw/arm/vexpress.c b/hw/arm/vexpress.c
+index 10a10d2..aac8c5e 100644
+--- a/hw/arm/vexpress.c
++++ b/hw/arm/vexpress.c
+@@ -148,6 +148,7 @@ static hwaddr motherboard_aseries_map[] = {
+     [VE_MMCI] = 0x1c050000,
+     [VE_KMI0] = 0x1c060000,
+     [VE_KMI1] = 0x1c070000,
++    [VE_MPC8XXX] = 0x1c080000,
+     [VE_UART0] = 0x1c090000,
+     [VE_UART1] = 0x1c0a0000,
+     [VE_UART2] = 0x1c0b0000,
diff --git a/package/qemu/4.2.0/1003-WZab-qemu-patched-mpc8xxx-for-communication-with-gui.patch b/package/qemu/4.2.0/1003-WZab-qemu-patched-mpc8xxx-for-communication-with-gui.patch
new file mode 100644
index 0000000..ccb5997
--- /dev/null
+++ b/package/qemu/4.2.0/1003-WZab-qemu-patched-mpc8xxx-for-communication-with-gui.patch
@@ -0,0 +1,160 @@
+diff --git a/hw/gpio/mpc8xxx.c b/hw/gpio/mpc8xxx.c
+index 1d99667..97c5fc3 100644
+--- a/hw/gpio/mpc8xxx.c
++++ b/hw/gpio/mpc8xxx.c
+@@ -5,6 +5,9 @@
+  *
+  * Author: Alexander Graf, <agraf@suse.de>
+  *
++ * The code was modified in 03.2020 by Wojciech M. Zabolotny <wzab01@gmail.com>
++ * To enable communication with GUI on host machine via POSIX IPC
++ * 
+  * This library is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Lesser General Public
+  * License as published by the Free Software Foundation; either
+@@ -22,12 +25,24 @@
+ #include "qemu/osdep.h"
+ #include "hw/irq.h"
+ #include "hw/sysbus.h"
++#include "qemu/main-loop.h" /* iothread mutex */
+ #include "migration/vmstate.h"
+ #include "qemu/module.h"
++#include <mqueue.h>
++#include <stdint.h>
++#include <fcntl.h>
++#include <sys/stat.h> 
+ 
+ #define TYPE_MPC8XXX_GPIO "mpc8xxx_gpio"
+ #define MPC8XXX_GPIO(obj) OBJECT_CHECK(MPC8XXXGPIOState, (obj), TYPE_MPC8XXX_GPIO)
+ 
++typedef struct {
++      uint8_t magick[2];
++      uint8_t pin;
++      uint8_t state;
++} gpio_msg;
++
++#define REMOTE_GPIO_MAGICK (0x6910)
+ typedef struct MPC8XXXGPIOState {
+     SysBusDevice parent_obj;
+ 
+@@ -35,6 +50,9 @@ typedef struct MPC8XXXGPIOState {
+     qemu_irq irq;
+     qemu_irq out[32];
+ 
++    mqd_t mq;
++    QemuThread thread;
++    QemuMutex dat_lock;
+     uint32_t dir;
+     uint32_t odr;
+     uint32_t dat;
+@@ -97,6 +115,7 @@ static void mpc8xxx_write_data(MPC8XXXGPIOState *s, uint32_t new_data)
+     uint32_t diff = old_data ^ new_data;
+     int i;
+ 
++    qemu_mutex_lock(&s->dat_lock);
+     for (i = 0; i < 32; i++) {
+         uint32_t mask = 0x80000000 >> i;
+         if (!(diff & mask)) {
+@@ -104,12 +123,22 @@ static void mpc8xxx_write_data(MPC8XXXGPIOState *s, uint32_t new_data)
+         }
+ 
+         if (s->dir & mask) {
++            gpio_msg msg;
++            msg.magick[0] = 0x69;
++            msg.magick[1] = 0x10;
++            msg.pin = i;
++            msg.state = (new_data & mask) ? 1 : 0;
+             /* Output */
+             qemu_set_irq(s->out[i], (new_data & mask) != 0);
++            /* Send the new value */
++            mq_send(s->mq,(const char *)&msg,sizeof(msg),0);
++            /* Update the bit in the dat field */
++            s->dat &= ~mask;
++            if ( new_data & mask ) s->dat |= mask;
+         }
+     }
+ 
+-    s->dat = new_data;
++    qemu_mutex_unlock(&s->dat_lock);
+ }
+ 
+ static void mpc8xxx_gpio_write(void *opaque, hwaddr offset,
+@@ -165,6 +194,7 @@ static void mpc8xxx_gpio_set_irq(void * opaque, int irq, int level)
+ 
+     mask = 0x80000000 >> irq;
+     if ((s->dir & mask) == 0) {
++        qemu_mutex_lock(&s->dat_lock);
+         uint32_t old_value = s->dat & mask;
+ 
+         s->dat &= ~mask;
+@@ -175,6 +205,7 @@ static void mpc8xxx_gpio_set_irq(void * opaque, int irq, int level)
+             s->ier |= mask;
+         }
+ 
++        qemu_mutex_unlock(&s->dat_lock);
+         mpc8xxx_gpio_update(s);
+     }
+ }
+@@ -184,6 +215,51 @@ static const MemoryRegionOps mpc8xxx_gpio_ops = {
+     .write = mpc8xxx_gpio_write,
+     .endianness = DEVICE_BIG_ENDIAN,
+ };
++static void * remote_gpio_thread(void * arg)
++{
++    MPC8XXXGPIOState *s = (MPC8XXXGPIOState *)arg;
++    //Here we receive the data from the queue 
++    const int MSG_MAX = 8192;
++    char buf[MSG_MAX];
++    gpio_msg * mg = (gpio_msg *)&buf;
++    mqd_t mq = mq_open("/to_qemu",O_CREAT | O_RDONLY,S_IRUSR | S_IWUSR,NULL);
++    if(mq<0) {
++        perror("I can't open mq");
++        exit(1);
++    }
++    while(1) {
++        int res = mq_receive(mq,buf,MSG_MAX,NULL);
++        if(res<0) {
++            perror("I can't receive");
++            exit(1);
++        }
++        if(res != sizeof(gpio_msg)) continue;
++        if((int) mg->magick[0]*256+mg->magick[1] != REMOTE_GPIO_MAGICK) {
++            printf("Wrong message received");
++        }
++        if(mg->pin < 32) {
++            qemu_mutex_lock_iothread();
++            mpc8xxx_gpio_set_irq(arg,mg->pin,mg->state);
++            qemu_mutex_unlock_iothread();
++        } else if(mg->pin == 255) {
++            //This is a special "reconnect message" it enforces sending state of all pins
++            int i;
++            uint32_t dat = s->dat;
++            uint32_t mask = 0x80000000;
++            for(i=0;i<32;i++) {
++                gpio_msg msg;
++                msg.magick[0] = 0x69;
++                msg.magick[1] = 0x10;
++                msg.pin = i;
++                msg.state = (dat & mask) ? 1 : 0;
++                /* Send the new value */
++                mq_send(s->mq,(const char *)&msg,sizeof(msg),0);
++                /* Update the bit in the dat field */
++                mask >>= 1;
++            }
++        }
++    }
++}
+ 
+ static void mpc8xxx_gpio_initfn(Object *obj)
+ {
+@@ -197,6 +273,10 @@ static void mpc8xxx_gpio_initfn(Object *obj)
+     sysbus_init_irq(sbd, &s->irq);
+     qdev_init_gpio_in(dev, mpc8xxx_gpio_set_irq, 32);
+     qdev_init_gpio_out(dev, s->out, 32);
++    qemu_mutex_init(&s->dat_lock);
++    s->mq = mq_open("/from_qemu",O_CREAT | O_WRONLY,S_IRUSR | S_IWUSR,NULL);
++    qemu_thread_create(&s->thread, "remote_gpio", remote_gpio_thread, s,
++                       QEMU_THREAD_JOINABLE);
+ }
+ 
+ static void mpc8xxx_gpio_class_init(ObjectClass *klass, void *data)
